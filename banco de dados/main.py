# -*- coding: utf-8 -*-

import mysql.connector
from tkinter import *
from tkinter import ttk
import datetime

class Imobiliaria(object):
    def __init__(self,main):
        #main.resizable(0,0)
        self.frame1 = Frame(main,pady = 20)
        self.frame2 = Frame(main,pady = 20)
        self.frame1.pack()
        self.frame2.pack()
        self.font1 = ('Verdana','20','bold')
        self.font2 = ('Verdana','10','bold')
        menu_label = Label(self.frame1,font = self.font1, text='Bem vindo ao menu principal do sistema imobiliário',fg='green')
        menu_label.pack()
        escolha_label = Label(self.frame1,font = self.font2, text='Escolha as opções desejadas abaixo',fg='green')
        escolha_label.pack()
        botoes_main = ['clientes inquilino cadastrados','clientes proprietários cadastrados', 'imóveis cadastrados','Consulta de ofertas','Fazer oferta de imóveis cliente', 'Fazer oferta de imóveis corretor','Analisar ofertas de imóveis', 'Consulta de corretores',
                     'imóveis mais caros', 'inserir novo corretor',
                     'inserir novo imóvel', 'inserir novo cliente inquilino', 'inserir novo cliente proprietário', 'atualizações de dados', 'excluir dados','Sair do programa']
        command_main = [self.consulta_cliente_inquilino,self.consulta_cliente_proprietario, self.consulta_imovel,self.consulta_oferta, self.fazer_oferta_imovel_cliente,self.fazer_oferta_imovel_corretor, self.analisar_oferta_imovel, self.consulta_corretor,
                      self.ranking_aluguel, self.corretor_novo, self.imovel_novo, self.cliente_novo_inquilino,self.cliente_novo_proprietario, self.atualizacao_dados, self.apagar_dados,main.destroy]

        for i in range(len(botoes_main)):
            if i % 3 == 0:
                self.subframe = Frame(self.frame2)
                self.subframe.pack()
            if i == len(botoes_main)-1:
                a = Button(self.subframe, text=botoes_main[i], bg='red', command=command_main[i],pady=10,padx=10)
            else:
                a = Button(self.subframe, text=botoes_main[i], bg='gray', command=command_main[i],pady=10,padx=10)
            a.pack(side=LEFT)

    def consulta_cliente_inquilino(self):
        Consulta_cliente = Tk()
        Consulta_cliente.title('Consultas de clientes')
        #Consulta_cliente.resizable(0, 0)
        Consulta_cliente.geometry('900x600')
        f1 = LabelFrame(Consulta_cliente, text="Resultado da Consulta de clientes")
        f1.pack(fill="both", expand="yes", padx=10, pady=10)
        # Treeview que exibirá a consulta
        tv = ttk.Treeview(f1, columns=('nome','estado civil','CPF','telefone','profissao','renda','fiadores','contato fiadores','saldo fiadores','email'), show="headings", height="15")
        tv.heading("nome", text="NOME")
        tv.heading("estado civil", text="ESTADO CIVIL")
        tv.heading("CPF", text="CPF")
        tv.heading("telefone", text="TELEFONE")
        tv.heading("profissao", text="PROFISSAO")
        tv.heading("renda", text="RENDA")
        tv.heading("fiadores", text="FIADORES")
        tv.heading("contato fiadores", text="CONTATO FIADORES")
        tv.heading("saldo fiadores", text="SALDO FIADORES")
        tv.heading("email", text="EMAIL")
        tv.column("nome", minwidth=0, width=200)
        tv.column("estado civil", minwidth=0, width=50)
        tv.column("CPF", minwidth=0, width=80)
        tv.column("telefone", minwidth=0, width=80)
        tv.column("profissao", minwidth=0, width=100)
        tv.column("renda", minwidth=0, width=100)
        tv.column("fiadores", minwidth=0, width=100)
        tv.column("contato fiadores", minwidth=0, width=100)
        tv.column("saldo fiadores", minwidth=0, width=100)
        tv.column("email", minwidth=0, width=80)
        tv.pack()
        # Frame que contém os Botões cadastrar e voltar pro menu principal
        self.f2 = Frame(Consulta_cliente, pady=50)
        self.f2.pack(side=BOTTOM)

        voltar = Button(self.f2, text="Voltar", width=15, command=Consulta_cliente.destroy, padx=20)
        voltar.pack()
        mydb = mysql.connector.connect(host='Localhost',user='root',password='ernst5897',database='sistema_imobiliario')
        mycursor = mydb.cursor()
        mycursor.execute("SELECT * FROM Cliente_inquilino")
        rows = mycursor.fetchall()
        for i in rows:
            tv.insert('', 'end', values=i)

        mycursor.close()
        mydb.close()
    def consulta_cliente_proprietario(self):
        Consulta_cliente = Tk()
        Consulta_cliente.title('Consultas de clientes')
        # Consulta_cliente.resizable(0, 0)
        Consulta_cliente.geometry('700x600')
        f1 = LabelFrame(Consulta_cliente, text="Resultado da Consulta de clientes")
        f1.pack(fill="both", expand="yes", padx=10, pady=10)
        # Treeview que exibirá a consulta
        tv = ttk.Treeview(f1, columns=('nome', 'estado civil', 'CPF', 'contato', 'email'), show="headings",
                          height="15")
        tv.heading("nome", text="NOME")
        tv.heading("estado civil", text="ESTADO CIVIL")
        tv.heading("CPF", text="CPF")
        tv.heading("contato", text="CONTATO")
        tv.heading("email", text="E-MAIL")
        tv.column("nome", minwidth=0, width=200)
        tv.column("estado civil", minwidth=0, width=50)
        tv.column("CPF", minwidth=0, width=50)
        tv.column("contato", minwidth=0, width=50)
        tv.column("email", minwidth=0, width=200)
        tv.pack()
        # Frame que contém os Botões cadastrar e voltar pro menu principal
        self.f2 = Frame(Consulta_cliente, pady=50)
        self.f2.pack(side=BOTTOM)

        voltar = Button(self.f2, text="Voltar", width=15, command=Consulta_cliente.destroy, padx=20)
        voltar.pack()
        mydb = mysql.connector.connect(host='Localhost', user='root', password='ernst5897',
                                       database='sistema_imobiliario')
        mycursor = mydb.cursor()
        mycursor.execute("SELECT * FROM Cliente_proprietario")
        rows = mycursor.fetchall()
        for i in rows:
            tv.insert('', 'end', values=i)

        mycursor.close()
        mydb.close()

    def consulta_imovel(self):
        Consulta_imovel = Tk()
        Consulta_imovel.title('Consultas de imóveis')
        #Consulta_imovel.resizable(0, 0)
        Consulta_imovel.geometry('700x500')
        self.f1 = LabelFrame(Consulta_imovel, text="Resultado da Consulta de imóvel")
        self.f1.pack(fill="both", expand="yes", padx=10, pady=10)
        # Treeview que exibirá a consulta
        tv = ttk.Treeview(self.f1, columns=('id','quartos','vagas','area','status','nome dono','CPF','data','registro','endereço','valor'), show="headings", height="15")
        tv.heading("id", text="ID")
        tv.heading("quartos", text="QUARTOS")
        tv.heading("vagas", text="VAGAS")
        tv.heading("area", text="AREA")
        tv.heading("status", text="STATUS")
        tv.heading("nome dono", text="PROPRIETÁRIO")
        tv.heading("CPF", text="CPF")
        tv.heading("data", text="DATA DO REGISTRO")
        tv.heading("registro", text="REGISTRO")
        tv.heading("endereço", text="ENDEREÇO")
        tv.heading("valor", text="VALOR")
        tv.column("id", minwidth=0, width=50)
        tv.column("quartos", minwidth=0, width=50)
        tv.column("vagas", minwidth=0, width=50)
        tv.column("area", minwidth=0, width=50)
        tv.column("status", minwidth=0, width=50)
        tv.column("nome dono", minwidth=0, width=50)
        tv.column("CPF", minwidth=0, width=50)
        tv.column("data", minwidth=0, width=50)
        tv.column("registro", minwidth=0, width=50)
        tv.column("endereço", minwidth=0, width=200)
        tv.column("valor", minwidth=0, width=100)
        tv.pack()
        # Frame que contém os Botões cadastrar e voltar pro menu principal
        self.f2 = Frame(Consulta_imovel, pady=50)
        self.f2.pack(side=BOTTOM)

        voltar = Button(self.f2, text="Voltar", width=15, command=Consulta_imovel.destroy, padx=20)
        voltar.pack()

        mydb = mysql.connector.connect(host='Localhost', user='root', password='ernst5897',
                                       database='sistema_imobiliario')
        mycursor = mydb.cursor()
        mycursor.execute("SELECT * FROM Imovel")
        rows = mycursor.fetchall()
        for i in rows:
            tv.insert('', 'end', values=i)

        mycursor.close()
        mydb.close()
    def consulta_oferta(self):
        Consulta_oferta = Tk()
        Consulta_oferta.title('Consultas de oferta')
        Consulta_oferta.geometry('800x600')
        self.f1 = LabelFrame(Consulta_oferta, text="Resultado da Consulta de oferta")
        self.f1.pack(fill="both", expand="yes", padx=10, pady=10)
        # Treeview que exibirá a consulta
        tv = ttk.Treeview(self.f1, columns=('id oferta', 'id imovel', 'nome cliente', 'CPF', 'valor original', 'valor ofertado','nome corretor','CRECI','valor comissao','data'), show="headings",
                          height="15")
        tv.heading("id oferta", text="ID OFERTA")
        tv.heading("id imovel", text="ID IMÓVEL")
        tv.heading("nome cliente", text="NOME CLIENTE")
        tv.heading("CPF", text="CPF CLIENTE")
        tv.heading("valor original", text="VALOR ALUGUEL")
        tv.heading("valor ofertado", text="VALOR OFERTADO")
        tv.heading("nome corretor", text="NOME CORRETOR")
        tv.heading("CRECI", text="CRECI")
        tv.heading("valor comissao", text="VALOR COMISSÃO")
        tv.heading("data", text="DATA OFERTA")
        tv.column("id oferta", minwidth=0, width=50)
        tv.column("id imovel", minwidth=0, width=50)
        tv.column("nome cliente", minwidth=0, width=200)
        tv.column("CPF", minwidth=0, width=80)
        tv.column("valor original", minwidth=0, width=80)
        tv.column("valor ofertado", minwidth=0, width=80)
        tv.column("nome corretor", minwidth=0, width=200)
        tv.column("CRECI", minwidth=0, width=100)
        tv.column("valor comissao", minwidth=0, width=100)
        tv.column("data", minwidth=0, width=100)
        tv.pack()
        # Frame que contém os Botões cadastrar e voltar pro menu principal
        self.f2 = Frame(Consulta_oferta, pady=50)
        self.f2.pack(side=BOTTOM)

        voltar = Button(self.f2, text="Voltar", width=15, command=Consulta_oferta.destroy, padx=20)
        voltar.pack()

        mydb = mysql.connector.connect(host='Localhost', user='root', password='ernst5897',
                                       database='sistema_imobiliario')
        mycursor = mydb.cursor()
        mycursor.execute("SELECT id_oferta,id_imovel,nome_cliente,CPF_cliente,valor_original,valor_oferta,nome_corretor,CRECI,valor_comissao,data_oferta FROM Oferta_aluguel")
        rows = mycursor.fetchall()
        for i in rows:
            tv.insert('', 'end', values=i)

        mycursor.close()
        mydb.close()
    def analisar_oferta_imovel(self):
        def fazer_contrato():
            try:
                mydb = mysql.connector.connect(host='Localhost', user='root', password='ernst5897',
                                               database='sistema_imobiliario')
                mycursor = mydb.cursor()
                mycursor.execute(f"SELECT * FROM Oferta_imovel WHERE id_oferta = {entry_id_oferta.get()}")
                results = mycursor.fetchone()
                mycursor.close()
                mydb.close()

                mydb = mysql.connector.connect(host='Localhost', user='root', password='ernst5897',
                                               database='sistema_imobiliario')
                mycursor = mydb.cursor()
                mycursor.execute(f"SELECT nome_dono,CPF_dono FROM Imovel WHERE id_imovel = {results[1]}")
                results2 = mycursor.fetchone()
                mycursor.close()
                mydb.close()
                data_contrato = datetime.date.today()
                duracao_contrato = 3
                mydb = mysql.connector.connect(host='Localhost', user='root', password='ernst5897',
                                               database='sistema_imobiliario')
                mycursor = mydb.cursor()
                mycursor.execute(f"INSERT INTO Contrato_aluguel VALUES ('{results[1]}','{results[2]}','{results[3]}','{results2[0]}','{results2[1]}','{data_contrato}',{duracao_contrato},'{results[7]}')")
                mydb.commit()
                mycursor.close()
                mydb.close()
                status = 'alugado'
                mydb = mysql.connector.connect(host='Localhost', user='root', password='ernst5897',
                                               database='sistema_imobiliario')
                mycursor = mydb.cursor()
                mycursor.execute(f"UPDATE FROM Imovel SET status_imovel = {status} WHERE id_imovel = {results[1]}")
                mydb.commit()
                mycursor.close()
                mydb.close()

                Fazer_contrato = Tk()
                Fazer_contrato.title("Efetuando o contrato de aluguel")
                Fazer_contrato.geometry('600x400')
                frame1 = Frame(Fazer_contrato)
                frame2 = Frame(Fazer_contrato)
                frame1.pack()
                frame2.pack()
                label_info = Label(frame1,text='O contrato foi efetuado com sucesso!')
                label_info.pack()
                botao_voltar = Button(frame2,text='Votlar',command=Fazer_contrato.destroy)
                botao_voltar.pack()
            except:
                Resultado = Tk()
                Resultado.title("Resultado")
                Resultado.geometry('200x100')
                frame1 = Frame(Resultado)
                frame2 = Frame(Resultado)
                frame1.pack()
                frame2.pack()
                label_erro = Label(frame1, text='Apresentou erro no processamento!')
                label_erro.pack()
                button_erro = Button(frame2, text='Voltar', bg='red', command=Resultado.destroy)
                button_erro.pack()

        def verificar():
            try:
                mydb = mysql.connector.connect(host='Localhost', user='root', password='ernst5897',
                                               database='sistema_imobiliario')
                mycursor = mydb.cursor()
                mycursor.execute(f"SELECT id_oferta,id_imovel,nome_cliente,CPF_cliente,valor_original,valor_oferta,valor_comissao,data_oferta FROM Oferta_imovel WHERE id_oferta = {entry_id_oferta.get()}")
                results = mycursor.fetchone()
                mycursor.close()
                mydb.close()
                Resultado = Tk()
                Resultado.title("Resultado da pesquisa")
                Resultado.geometry('400x300')
                f1 = Frame(Resultado)
                f2 = Frame(Resultado)
                f3 = Frame(Resultado)
                f4 = Frame(Resultado)
                f5 = Frame(Resultado)
                f6 = Frame(Resultado)
                f7 = Frame(Resultado)
                f1.pack()
                f2.pack()
                f3.pack()
                f4.pack()
                f5.pack()
                f6.pack()
                f7.pack()
                label_id = Label(f1,text='id oferta:')
                label_id.pack(side=LEFT)
                label_id_resultado = Label(f1,text=results[0])
                label_id_resultado.pack(side=LEFT)
                label_id_movel = Label(f2,text='ID imóvel:')
                label_id_movel.pack(side=LEFT)
                label_resultado_id_imovel = Label(f2,text=results[1])
                label_resultado_id_imovel.pack(side=LEFT)
                label_nome_inquilo = Label(f3,text='Nome do interessado:')
                label_nome_inquilo.pack(side=LEFT)
                label_resultado_nome_inquilino = Label(f3,text=results[2])
                label_resultado_nome_inquilino.pack(side=LEFT)
                label_CPF_inquilo = Label(f4, text='Nome do interessado:')
                label_CPF_inquilo.pack(side=LEFT)
                label_resultado_CPF_inquilino = Label(f4, text=results[3])
                label_resultado_CPF_inquilino.pack(side=LEFT)
                label_valor_original = Label(f5,text='Valor original do aluguel:')
                label_valor_original.pack(side=LEFT)
                label_resultado_original = Label(f5,text=results[4])
                label_resultado_original.pack(side=LEFT)
                label_valor_oferta = Label(f6,text='Valor ofertado do aluguel')
                label_valor_oferta.pack(side=LEFT)
                label_resultado_valor_oferta = Label(f6,text=results[5])
                label_resultado_valor_oferta.pack(side=LEFT)
                botao_aceitar = Button(f7,text='Aceitar',bg='green',command=fazer_contrato)
                botao_aceitar.pack(side=LEFT)
                botao_recusar = Button(f7,text='Recusar',bg='red')
                botao_recusar.pack(side=LEFT)
                botao_voltar= Button(f7,text='Voltar')
                botao_voltar.pack(side=LEFT)
            except:
                mydb.close()
                Resultado = Tk()
                Resultado.title("Resultado da pesquisa")
                Resultado.geometry('200x100')
                frame1 = Frame(Resultado)
                frame2 = Frame(Resultado)
                frame1.pack()
                frame2.pack()
                label_erro = Label(frame1, text='Não foi econtrado o imóvel')
                label_erro.pack()
                button_erro = Button(frame2, text='Voltar', bg='red',command=Resultado.destroy)
                button_erro.pack()


        Analisar_oferta = Tk()
        Analisar_oferta.title('Análise de ofertas')
        Analisar_oferta.geometry('350x200')
        self.f1 = Frame(Analisar_oferta)
        self.f2 = Frame(Analisar_oferta)
        self.f3 = Frame(Analisar_oferta)
        self.f4 = Frame(Analisar_oferta)
        self.f1.pack()
        self.f2.pack()
        self.f3.pack()
        self.f4.pack()
        label_main_analise = Label(self.f1,text='Análise de oferta de imóveis')
        label_main_analise.pack()
        label_info = Label(self.f2,text='Insere o id da oferta abaixo:')
        label_info.pack(side=LEFT)
        label_id_oferta = Label(self.f2,text='ID da oferta:')
        label_id_oferta.pack(side=LEFT)
        entry_id_oferta = Entry(self.f2)
        entry_id_oferta.pack(side=LEFT)
        pesquisar = Button(self.f3,text='Pesquisar',command = verificar)
        pesquisar.pack(side=LEFT)
        voltar = Button(self.f3,text='Voltar',command = Analisar_oferta.destroy)
        voltar.pack()



    def fazer_oferta_imovel_cliente(self):
        def executar_oferta():
            try:
                data = datetime.datetime.today()
                mydb = mysql.connector.connect(host='Localhost', user='root', password='ernst5897',
                                               database='sistema_imobiliario')
                mycursor = mydb.cursor()
                mycursor.execute(f"SELECT id_imovel,valor_aluguel FROM Imovel WHERE id_imovel = {entry_id_imovel.get()}")
                results = mycursor.fetchone()
                mycursor.close()
                mydb.close()
                mydb = mysql.connector.connect(host='Localhost', user='root', password='ernst5897',
                                               database='sistema_imobiliario')
                mycursor = mydb.cursor()
                mycursor.execute(
                    f"SELECT valor_comissao FROM Corretor WHERE CRECI = {entry_CRECI.get()}")
                results2 = mycursor.fetchone()
                mycursor.close()
                mydb.close()
                mydb = mysql.connector.connect(host='Localhost', user='root', password='ernst5897',
                                               database='sistema_imobiliario')
                mycursor = mydb.cursor()
                mycursor.execute(f"INSERT INTO Oferta_aluguel VALUES('{entry_id_imovel.get()}','{entry_nome.get()}','{entry_CPF_inquilino.get()}','{entry_nome_corretor.get()}','{entry_CRECI.get()}',{results[1]},{entry_valor.get()},{results2[0]},{data})")
                mydb.commit()
                mycursor.close()
                mydb.close()
                Resultado = Tk()
                Resultado.title("Resultado da pesquisa")
                frame1 = Frame(Resultado)
                frame2 = Frame(Resultado)
                frame1.pack()
                frame2.pack()
                label_info = Label(frame1,text='Dados inseridos com sucesso!',fg='green')
                label_info.pack()
                botao_voltar = Button(frame2,text='Voltar',bg='green',command=Resultado.destroy)
                botao_voltar.pack()

            except:
                Resultado = Tk()
                Resultado.title("Resultado da pesquisa")
                Resultado.geometry('400x300')
                frame1 = Frame(Resultado)
                frame2 = Frame(Resultado)
                frame1.pack()
                frame2.pack()
                label_erro = Label(frame1, text='Apresentou erro!')
                label_erro.pack()
                button_erro = Button(frame2, text='Voltar', bg='red',command=Resultado.destroy)
                button_erro.pack()


        Fazer_oferta_cliente = Tk()
        Fazer_oferta_cliente.title("Fazer oferta do imóvel")
        Fazer_oferta_cliente.geometry("800x600")
        self.f1 = Frame(Fazer_oferta_cliente)
        self.f2 = Frame(Fazer_oferta_cliente)
        self.f3 = Frame(Fazer_oferta_cliente)
        self.f4 = Frame(Fazer_oferta_cliente)
        self.f5 = Frame(Fazer_oferta_cliente)
        self.f6 = Frame(Fazer_oferta_cliente)
        self.f7 = Frame(Fazer_oferta_cliente)
        self.f8 = Frame(Fazer_oferta_cliente)
        self.f9 = Frame(Fazer_oferta_cliente)
        self.f1.pack()
        self.f2.pack()
        self.f3.pack()
        self.f4.pack()
        self.f5.pack()
        self.f6.pack()
        self.f7.pack()
        self.f8.pack()
        self.f9.pack()
        label_oferta = Label(self.f1,text='Insere os dados desejados abaixo')
        label_oferta.pack()
        label_id_imovel = Label(self.f2,text='ID do imóvel:')
        label_id_imovel.pack(side=LEFT)
        entry_id_imovel = Entry(self.f2)
        entry_id_imovel.pack(side=LEFT)
        label_nome_inquilino = Label(self.f3,text='Nome:')
        label_nome_inquilino.pack(side=LEFT)
        entry_nome = Entry(self.f3)
        entry_nome.pack(side=LEFT)
        label_CPF_inquilino = Label(self.f4,text='CPF:')
        label_CPF_inquilino.pack(side=LEFT)
        entry_CPF_inquilino = Entry(self.f4)
        entry_CPF_inquilino.pack(side=LEFT)
        label_nome_corretor = Label(self.f5,text='Nome do corretor:')
        label_nome_corretor.pack(side=LEFT)
        entry_nome_corretor = Entry(self.f5)
        entry_nome_corretor.pack(side=LEFT)
        label_CRECI = Label(self.f6,text='CRECI')
        label_CRECI.pack(side=LEFT)
        entry_CRECI = Entry(self.f6)
        entry_CRECI.pack(side=LEFT)
        label_valor = Label(self.f7,text="Valor a ofertar:")
        label_valor.pack(side=LEFT)
        entry_valor = Entry(self.f7)
        entry_valor.pack(side=LEFT)
        label_data = Label(self.f8,text='Data Exemplo(2018-12-03 YYY-MM-DD):')
        label_data.pack(side=LEFT)
        entry_data = Entry(self.f8)
        entry_data.pack(side=LEFT)
        fazer = Button(self.f9,text='Fazer a oferta',command=executar_oferta)
        fazer.pack(side=LEFT)
        voltar = Button(self.f9,text='Voltar',command=Fazer_oferta_cliente.destroy)
        voltar.pack(side=LEFT)
    def fazer_oferta_imovel_corretor(self):
        def alterar_valor():
            try:
                mydb = mysql.connector.connect(host='Localhost', user='root', password='ernst5897',
                                               database='sistema_imobiliario')
                mycursor = mydb.cursor()
                mycursor.execute(f"UPDATE Imovel SET valor_aluguel = {entry_valor.get()} WHERE id_imovel = {entry_id_imovel.get()}")
                mydb.commit()
                mycursor.close()
                mydb.close()

                Resultado = Tk()
                Resultado.title("Resultado da pesquisa")
            except:
                Resultado = Tk()
                Resultado.title("Resultado da pesquisa")
                Resultado.geometry('400x300')
                frame1 = Frame(Resultado)
                frame2 = Frame(Resultado)
                frame1.pack()
                frame2.pack()
                label_erro = Label(frame1, text='Não foi econtrado o imóvel')
                label_erro.pack()
                button_erro = Button(frame2, text='Voltar', bg='red', command=Resultado.destroy)
                button_erro.pack()
        def executar_sugestao():
            def alterar_valor():
                try:
                    mydb = mysql.connector.connect(host='Localhost', user='root', password='ernst5897',
                                                   database='sistema_imobiliario')
                    mycursor = mydb.cursor()
                    mycursor.execute(f"UPDATE Imovel SET valor_aluguel = {entry_valor.get()} WHERE id_imovel = {entry_id_imovel.get()}")
                    mydb.commit()
                    mycursor.close()
                    mydb.close()
                    Confirmacao = Tk()
                    Confirmacao.title("Confirmação")
                    Confirmacao.geometry('400x300')
                    frame1 = Frame(Confirmacao)
                    frame2 = Frame(Confirmacao)
                    frame1.pack()
                    frame2.pack()
                    label_confirmacao = Label(frame1,text='O valor do aluguel sugerido foi alterado com suceso!')
                    label_confirmacao.pack()
                    botao_confirmacao = Button(frame2,text='confirmado',bg='green')
                    botao_confirmacao.pack()
                except:
                    mydb.close()
                    Erro = Tk()
                    Erro.title("Confirmação")
                    Erro.geometry('400x300')
                    frame1 = Frame(Erro)
                    frame2 = Frame(Erro)
                    frame1.pack()
                    frame2.pack()
                    label_confirmacao = Label(frame1, text='Apresentou falha na atualização!')
                    label_confirmacao.pack()
                    botao_confirmacao = Button(frame2, text='Voltar', bg='red')
                    botao_confirmacao.pack()
            try:
                mydb = mysql.connector.connect(host='Localhost', user='root', password='ernst5897',
                                               database='sistema_imobiliario')
                mycursor = mydb.cursor()
                mycursor.execute(f"SELECT id_imovel,numero_quartos,numero_vagas,endereco,valor_aluguel FROM Imovel WHERE id_imovel = {entry_id_imovel.get()}")
                results = mycursor.fetchone()
                mycursor.close()
                mydb.close()

                Resultado = Tk()
                Resultado.title("Resultado da pesquisa")
                Resultado.geometry('400x300')
                frame1 = Frame(Resultado)
                frame2 = Frame(Resultado)
                frame3 = Frame(Resultado)
                frame4 = Frame(Resultado)
                frame5 = Frame(Resultado)
                frame6 = Frame(Resultado)
                frame7 = Frame(Resultado)
                frame1.pack()
                frame2.pack()
                frame3.pack()
                frame4.pack()
                frame5.pack()
                frame6.pack()
                frame7.pack()
                label_info = Label(frame1, text='Caro proprietário, o coretor sugeriu o preço de aluguel para o seguinte imóvel')
                label_info.pack()
                label_id_imovel = Label(frame2,text='id do imóvel:')
                label_id_imovel.pack(side=LEFT)
                label_resultado_id = Label(frame2,text=results[0])
                label_resultado_id.pack(side=LEFT)
                label_quartos = Label(frame3,text='Número de quartos:')
                label_quartos.pack(side=LEFT)
                label_resultado_quartos = Label(frame3,text=results[1])
                label_resultado_quartos.pack(side=LEFT)
                label_vagas = Label(frame4,text='Número de vagas:')
                label_vagas.pack(side=LEFT)
                label_resultado_vagas = Label(frame4,text=results[2])
                label_resultado_vagas.pack(side=LEFT)
                label_endereco = Label(frame5,text='Endereço:')
                label_endereco.pack(side=LEFT)
                label_resultado_endereco = Label(frame5,text=results[3])
                label_resultado_endereco.pack(side=LEFT)
                label_valor = Label(frame6,text='Valor do aluguel original:')
                label_valor.pack(side=LEFT)
                label_resultado_valor = Label(frame6,text=results[4])
                label_resultado_valor.pack(side=LEFT)
                label_valor_sugerido = Label(frame7,text='Valor sugerido:')
                label_valor_sugerido.pack(side=LEFT)
                label_resultado_sugerido = Label(frame7,text=entry_valor.get(),fg='yellow')
                label_resultado_sugerido.pack(side=LEFT)
                botao_aceitar = Button(frame4,text='Aceitar',bg='green',command=alterar_valor)
                botao_aceitar.pack(side=LEFT)
                button_recusar = Button(frame2, text='Recusar', bg='green',command=Resultado.destroy)
                button_recusar.pack(side=LEFT)
                mydb.close()
                mycursor.close()
            except:
                Resultado = Tk()
                Resultado.title("Resultado da pesquisa")
                Resultado.geometry('400x300')
                frame1 = Frame(Resultado)
                frame2 = Frame(Resultado)
                frame1.pack()
                frame2.pack()
                label_erro = Label(frame1,text='Imóvel não encontrado!')
                label_erro.pack()
                button_erro = Button(frame2, text='Voltar', bg='red',command=Resultado.destroy)
                button_erro.pack()

        Fazer_oferta_corretor = Tk()
        Fazer_oferta_corretor.title("Fazer a sugestão do valor do imóvel")
        Fazer_oferta_corretor.geometry("800x600")
        self.f1 = Frame(Fazer_oferta_corretor)
        self.f2 = Frame(Fazer_oferta_corretor)
        self.f3 = Frame(Fazer_oferta_corretor)
        self.f4 = Frame(Fazer_oferta_corretor)
        self.f5 = Frame(Fazer_oferta_corretor)
        self.f1.pack()
        self.f2.pack()
        self.f3.pack()
        self.f4.pack()
        self.f5.pack()
        label_oferta = Label(self.f1, text='Insere os dados desejados abaixo')
        label_oferta.pack()
        label_id_imovel = Label(self.f2, text='ID do imóvel:')
        label_id_imovel.pack(side=LEFT)
        entry_id_imovel = Entry(self.f2)
        entry_id_imovel.pack(side=LEFT)
        label_valor = Label(self.f3, text="Valor sugerido:")
        label_valor.pack(side=LEFT)
        entry_valor = Entry(self.f3)
        entry_valor.pack(side=LEFT)
        fazer = Button(self.f4, text='Fazer a sugestão', command=executar_sugestao)
        fazer.pack(side=LEFT)
        voltar = Button(self.f4, text='Voltar', command=Fazer_oferta_corretor.destroy)
        voltar.pack(side=LEFT)
    def consulta_corretor(self):
        Consulta_corretor = Tk()
        Consulta_corretor.title('Lista de corretores pelo desemopenho')
        #Consulta_corretor.resizable(0, 0)
        Consulta_corretor.geometry('800x600')
        self.f1 = LabelFrame(Consulta_corretor, text="Resultado da consulta de corretores")
        self.f1.pack(fill="both", expand="yes", padx=10, pady=10)
        # Treeview que exibirá a consulta
        tv = ttk.Treeview(self.f1, columns=('nome','CRECI','telefone','data','valor comissao'), show="headings",
                          height="15")
        tv.heading("nome", text="NOME")
        tv.heading("CRECI", text="CRECI")
        tv.heading("telefone", text="CONTATO")
        tv.heading("data", text="DATA")
        tv.heading("valor comissao", text="COMISSAO")
        tv.column("nome", minwidth=0, width=200)
        tv.column("CRECI", minwidth=0, width=50)
        tv.column("telefone", minwidth=0, width=50)
        tv.column("data", minwidth=0, width=50)
        tv.column("valor comissao", minwidth=0, width=50)
        tv.pack()
        # Frame que contém os Botões cadastrar e voltar pro menu principal
        self.f2 = Frame(Consulta_corretor, pady=50)
        self.f2.pack(side=BOTTOM)

        voltar = Button(self.f2, text="Voltar", width=15, command=Consulta_corretor.destroy, padx=20)
        voltar.pack()
        mydb = mysql.connector.connect(host='Localhost', user='root', password='ernst5897',
                                       database='sistema_imobiliario')
        mycursor = mydb.cursor()
        mycursor.execute("SELECT * FROM Corretor")
        rows = mycursor.fetchall()
        for i in rows:
            tv.insert('', 'end', values=i)

        mycursor.close()
        mydb.close()
    def ranking_aluguel(self):
        Ranking_aluguel = Tk()
        Ranking_aluguel.title('Ranking de alugueis mais caros da imobiliária')
        #Ranking_aluguel.resizable(0, 0)
        Ranking_aluguel.geometry('800x500')
        self.f1 = LabelFrame(Ranking_aluguel, text="Resultado da Consulta de imóvel")
        self.f1.pack(fill="both", expand="yes", padx=10, pady=10)
        # Treeview que exibirá a consulta
        tv = ttk.Treeview(self.f1, columns=('id contrato','id imovel', 'valor'), show="headings",
                          height="15")
        tv.heading("id contrato", text="ID CONTRATO")
        tv.heading("id imovel", text="ID IMÓVEL")
        tv.heading("valor", text="VALOR")
        tv.column("id contrato", minwidth=0, width=100)
        tv.column("id imovel", minwidth=0, width=100)
        tv.column("valor", minwidth=0, width=100)
        tv.pack()
        # Frame que contém os Botões cadastrar e voltar pro menu principal
        self.f2 = Frame(Ranking_aluguel, pady=50)
        self.f2.pack(side=BOTTOM)
        voltar = Button(self.f2, text="Voltar", width=15, command=Ranking_aluguel.destroy, padx=20)
        voltar.pack()

        mydb = mysql.connector.connect(host='Localhost', user='root', password='ernst5897',
                                       database='sistema_imobiliario')
        mycursor = mydb.cursor()
        mycursor.execute("SELECT id_contrato,id_imovel,max(valor_aluguel) FROM Contrato_aluguel")
        rows = mycursor.fetchmany(3)
        for i in rows:
                tv.insert('', 'end', values=i)
        mycursor.close()
        mydb.close()
    def corretor_novo(self):
        def inserir_corretor():
            try:
                data=datetime.datetime.today()
                mydb = mysql.connector.connect(host="localhost", user="root", password="ernst5897",
                                              database="sistema_imobiliario")
                mycursor = mydb.cursor()
                mycursor.execute(f"INSERT INTO Corretor VALUES ('{entry_nome.get()}','{entry_creci.get()}','{entry_telefone.get()}','{data}',{entry_valor_comissao.get()})")
                mydb.commit()
                mycursor.close()
                mydb.close()

                confirmacao = Tk()
                confirmacao.title('Confirmação')
                confirmacao.geometry('250x100')
                confirmacao.resizable(0, 0)
                f4 = Frame(confirmacao, pady=15)
                f4.pack()

                f5 = Frame(confirmacao)
                f5.pack(side=BOTTOM)

                confirma = Label(f4, text="Dados inseridos com sucesso!", fg="green")
                confirma.pack()

                ok = Button(f5, text="OK", width=15, command=confirmacao.destroy)
                ok.pack()
            except:
                mydb.close()

                erro = Tk()
                erro.title('Erro')
                erro.geometry('300x100')
                erro.resizable(0, 0)
                f6 = Frame(erro, pady=15)
                f6.pack()

                f7 = Frame(erro)
                f7.pack(side=BOTTOM)

                confirma = Label(f6, text="Erro ao inserir cadastro no banco de dados!", fg="red")
                confirma.pack()
                ok = Button(f7, text="OK", width=15, command=erro.destroy)
                ok.pack()
        Corretor_novo = Tk()
        Corretor_novo.title('Inserir novo corretor da imobiliária')
        #Corretor_novo.resizable(0, 0)
        Corretor_novo.geometry('800x500')
        self.f1 = Frame(Corretor_novo)
        self.f2 = Frame(Corretor_novo)
        self.f3 = Frame(Corretor_novo)
        self.f4 = Frame(Corretor_novo)
        self.f5 = Frame(Corretor_novo)
        self.f6 = Frame(Corretor_novo)
        self.f7 = Frame(Corretor_novo)
        self.f1.pack()
        self.f2.pack()
        self.f3.pack()
        self.f4.pack()
        self.f5.pack()
        self.f6.pack()
        self.f7.pack()
        self.font3 = ('Verdana', '15', 'bold')
        label_novo_corretor = Label(self.f1,font=self.font3,text='Insira dados do novo corretor:',bg='gray',fg='green')
        label_novo_corretor.pack()

        label_nome = Label(self.f2,text='Nome:')
        label_nome.pack(side = LEFT)
        entry_nome = Entry(self.f2)
        entry_nome.pack(side = LEFT)
        label_creci = Label(self.f3, text='Registro do CRECI:')
        label_creci.pack(side=LEFT)
        entry_creci = Entry(self.f3)
        entry_creci.pack(side=LEFT)
        label_telefone = Label(self.f5, text='telefone:')
        label_telefone.pack(side=LEFT)
        entry_telefone = Entry(self.f5)
        entry_telefone.pack(side=LEFT)
        label_valor_comissao = Label(self.f6, text='Valor da comissão:')
        label_valor_comissao.pack(side=LEFT)
        entry_valor_comissao = Entry(self.f6)
        entry_valor_comissao.pack(side=LEFT)
        data = datetime.date.today()
        inserir = Button(self.f7, text='Inserir',command=inserir_corretor)
        inserir.pack(side=LEFT)
        voltar = Button(self.f7, text='Voltar',command=Corretor_novo.destroy)
        voltar.pack(side=LEFT)

    def imovel_novo(self):
        def inserir_imovel():
            try:
                mydb = mysql.connector.connect(host="localhost", user="root", password="ernst5897",
                                              database="sistema_imobiliario")
                mycursor = mydb.cursor()
                mycursor.execute(f"INSERT INTO Imovel(numero_quartos,numero_vagas,area_construida,nome_dono,CPF_dono,data_registro,certidao_registro,endereco,valor_aluguel) VALUES ({entry_quartos.get()},{entry_vagas.get()},{entry_area.get()},'{entry_nome_proprietario.get()}','{entry_CPF_proprietario.get()}','{entry_data_registro.get()}','{entry_certidao_registro.get()}','{entry_endereco.get()}',{entry_valor_aluguel.get()})")
                mydb.commit()
                mycursor.close()
                mydb.close()
                confirmacao = Tk()
                confirmacao.title('Confirmação')
                confirmacao.geometry('250x100')
                confirmacao.resizable(0, 0)
                f4 = Frame(confirmacao, pady=15)
                f4.pack()

                f5 = Frame(confirmacao)
                f5.pack(side=BOTTOM)

                confirma = Label(f4, text="Dados inseridos com sucesso!", fg="green")
                confirma.pack()

                ok = Button(f5, text="OK", width=15, command=confirmacao.destroy)
                ok.pack()
            except:
                mydb.close()
                #form.delete(0, END)
                erro = Tk()
                erro.title('Erro')
                erro.geometry('300x100')
                erro.resizable(0, 0)
                f6 = Frame(erro, pady=15)
                f6.pack()

                f7 = Frame(erro)
                f7.pack(side=BOTTOM)

                confirma = Label(f6, text="Erro ao inserir cadastro no banco de dados!", fg="red")
                confirma.pack()
                ok = Button(f7, text="OK", width=15, command=erro.destroy)
                ok.pack()
        Imovel_novo = Tk()
        Imovel_novo.title('Inserir novo imóvel na imobiliária')
        Imovel_novo.geometry('600x400')
        #Imovel_novo.resizable(0, 0)
        self.f1 = Frame(Imovel_novo)
        self.f2 = Frame(Imovel_novo)
        self.f3 = Frame(Imovel_novo)
        self.f4 = Frame(Imovel_novo)
        self.f5 = Frame(Imovel_novo)
        self.f6 = Frame(Imovel_novo)
        self.f7 = Frame(Imovel_novo)
        self.f8 = Frame(Imovel_novo)
        self.f9 = Frame(Imovel_novo)
        self.f10 = Frame(Imovel_novo)
        self.f11 = Frame(Imovel_novo)
        self.f12 = Frame(Imovel_novo)
        self.f1.pack()
        self.f2.pack()
        self.f3.pack()
        self.f4.pack()
        self.f5.pack()
        self.f6.pack()
        self.f7.pack()
        self.f8.pack()
        self.f9.pack()
        self.f10.pack()
        self.f11.pack()
        self.f12.pack()
        self.font3 = ('Verdana', '15', 'bold')
        label_novo_imovel = Label(self.f1, font=self.font3, text='Insira dados do novo imóvel:', bg='gray', fg='green')
        label_novo_imovel.pack()
        label_endereco = Label(self.f2, text='Endereço:')
        label_endereco.pack(side=LEFT)
        entry_endereco = Entry(self.f2)
        entry_endereco.pack(side=LEFT)
        label_quartos = Label(self.f3, text='Número de quartos:')
        label_quartos.pack(side=LEFT)
        entry_quartos = Entry(self.f3)
        entry_quartos.pack(side=LEFT)
        label_vagas = Label(self.f4, text='Número de vagas:')
        label_vagas.pack(side=LEFT)
        entry_vagas = Entry(self.f4)
        entry_vagas.pack(side=LEFT)
        label_valor_aluguel = Label(self.f5, text='Valor do aluguel:')
        label_valor_aluguel.pack(side=LEFT)
        entry_valor_aluguel = Entry(self.f5)
        entry_valor_aluguel.pack(side=LEFT)
        label_area = Label(self.f6,text='Área construida:')
        label_area.pack(side=LEFT)
        entry_area = Entry(self.f6)
        entry_area.pack(side=LEFT)
        label_nome_proprietario = Label(self.f7,text='Nome do proprietário:')
        label_nome_proprietario.pack(side=LEFT)
        entry_nome_proprietario = Entry(self.f7)
        entry_nome_proprietario.pack(side=LEFT)
        label_CPF_proprietario = Label(self.f8,text='CPF do proprietário:')
        label_CPF_proprietario.pack(side=LEFT)
        entry_CPF_proprietario = Entry(self.f8)
        entry_CPF_proprietario.pack(side=LEFT)
        label_certidao_registro = Label(self.f9,text='Certidão do registro:')
        label_certidao_registro.pack(side=LEFT)
        entry_certidao_registro = Entry(self.f9)
        entry_certidao_registro.pack(side=LEFT)
        label_data_registro = Label(self.f10,text='Data do registro da certidão:')
        label_data_registro.pack(side=LEFT)
        entry_data_registro = Entry(self.f10)
        entry_data_registro.pack(side=LEFT)
        inserir = Button(self.f11, text='Inserir',command=inserir_imovel)
        inserir.pack(side=LEFT)
        voltar = Button(self.f11, text='Voltar',command=Imovel_novo.destroy)
        voltar.pack(side=LEFT)


    def cliente_novo_inquilino(self):
        def inserir_inquilino():
            try:
                mydb = mysql.connector.connect(host="localhost", user="root", password="ernst5897",
                                              database="sistema_imobiliario")
                mycursor = mydb.cursor()
                mycursor.execute(f"INSERT INTO Cliente_inquilino VALUES ('{entry_nome.get()}','{entry_estado_civil.get()}','{entry_CPF.get()}','{entry_telefone.get()}','{entry_profissao.get()}',{entry_renda.get()},'{entry_nome_fiadores.get()}','{entry_telefone_fiadores.get()}',{entry_saldo_fiadores.get()},'{entry_email.get()}')")
                mydb.commit()
                mycursor.close()
                mydb.close()
                #form.delete(0, END)
                confirmacao = Tk()
                confirmacao.title('Confirmação')
                confirmacao.geometry('250x100')
                confirmacao.resizable(0, 0)
                f4 = Frame(confirmacao, pady=15)
                f4.pack()

                f5 = Frame(confirmacao)
                f5.pack(side=BOTTOM)

                confirma = Label(f4, text="Dados inseridos com sucesso!", fg="green")
                confirma.pack()

                ok = Button(f5, text="OK", width=15, command=confirmacao.destroy)
                ok.pack()
            except:
                mydb.close()
                #form.delete(0, END)
                erro = Tk()
                erro.title('Erro')
                erro.geometry('300x100')
                erro.resizable(0, 0)
                f6 = Frame(erro, pady=15)
                f6.pack()

                f7 = Frame(erro)
                f7.pack(side=BOTTOM)

                confirma = Label(f6, text="Erro ao inserir cadastro no banco de dados!", fg="red")
                confirma.pack()
                ok = Button(f7, text="OK", width=15, command=erro.destroy)
                ok.pack()
        Cliente_novo = Tk()
        Cliente_novo.title('Inserir novo cliente da imobiliária')
        #Cliente_novo.resizable(0, 0)
        self.f1 = Frame(Cliente_novo)
        self.f2 = Frame(Cliente_novo)
        self.f3 = Frame(Cliente_novo)
        self.f4 = Frame(Cliente_novo)
        self.f5 = Frame(Cliente_novo)
        self.f6 = Frame(Cliente_novo)
        self.f7 = Frame(Cliente_novo)
        self.f8 = Frame(Cliente_novo)
        self.f9 = Frame(Cliente_novo)
        self.f10 = Frame(Cliente_novo)
        self.f11 = Frame(Cliente_novo)
        self.f12 = Frame(Cliente_novo)
        self.f1.pack()
        self.f2.pack()
        self.f3.pack()
        self.f4.pack()
        self.f5.pack()
        self.f6.pack()
        self.f7.pack()
        self.f8.pack()
        self.f9.pack()
        self.f10.pack()
        self.f11.pack()
        self.f12.pack()
        self.font3 = ('Verdana', '15', 'bold')
        label_novo_cliente = Label(self.f1, font=self.font3, text='Insira dados do novo cliente inquilino:', bg='gray', fg='green')
        label_novo_cliente.pack()
        label_nome = Label(self.f2, text='Nome:')
        label_nome.pack(side=LEFT)
        entry_nome = Entry(self.f2)
        entry_nome.pack(side=LEFT)
        label_estado_civil = Label(self.f3,text='estado civil:')
        label_estado_civil.pack(side=LEFT)
        entry_estado_civil = Entry(self.f3)
        entry_estado_civil.pack(side=LEFT)
        label_CPF = Label(self.f4, text='CPF:')
        label_CPF.pack(side=LEFT)
        entry_CPF = Entry(self.f4)
        entry_CPF.pack(side=LEFT)
        label_telefone = Label(self.f5, text='Telefone:')
        label_telefone.pack(side=LEFT)
        entry_telefone = Entry(self.f5)
        entry_telefone.pack(side=LEFT)
        label_profissao = Label(self.f6, text='profissão:')
        label_profissao.pack(side=LEFT)
        entry_profissao = Entry(self.f6)
        entry_profissao.pack(side=LEFT)
        label_renda = Label(self.f7,text='Renda familiar:')
        label_renda.pack(side=LEFT)
        entry_renda = Entry(self.f7)
        entry_renda.pack(side=LEFT)
        label_nome_fiadores = Label(self.f8,text='Nome(s) do(s) fiador(es):')
        label_nome_fiadores.pack(side=LEFT)
        entry_nome_fiadores = Entry(self.f8)
        entry_nome_fiadores.pack(side=LEFT)
        label_telefone_fiadores = Label(self.f9,text='Telefone do(s) fiador(es):')
        label_telefone_fiadores.pack(side=LEFT)
        entry_telefone_fiadores = Entry(self.f9)
        entry_telefone_fiadores.pack(side=LEFT)
        label_saldo_fiadores = Label(self.f10,text='Renda do(s) fiador(es):')
        label_saldo_fiadores.pack(side=LEFT)
        entry_saldo_fiadores = Entry(self.f10)
        entry_saldo_fiadores.pack(side=LEFT)
        label_email = Label(self.f11,text='e-mail:')
        label_email.pack(side=LEFT)
        entry_email = Entry(self.f11)
        entry_email.pack(side=LEFT)
        inserir = Button(self.f12, text='Inserir',command=inserir_inquilino)
        inserir.pack(side=LEFT)
        voltar = Button(self.f12, text='Voltar',command=Cliente_novo.destroy)
        voltar.pack(side=LEFT)


    def cliente_novo_proprietario(self):
        def inserir_proprietario():
            try:
                mydb = mysql.connector.connect(host="localhost", user="root", password="ernst5897",
                                              database="sistema_imobiliario")
                mycursor = mydb.cursor()
                mycursor.execute(f"INSERT INTO Cliente_proprietario VALUES ('{entry_nome.get()}','{entry_estado_civil.get()}','{entry_CPF.get()}','{entry_telefone.get()}','{entry_email.get()}');")
                mydb.commit()
                mycursor.close()
                mydb.close()
                #form.delete(0, END)
                confirmacao = Tk()
                confirmacao.title('Confirmação')
                confirmacao.geometry('250x100')
                confirmacao.resizable(0, 0)
                f4 = Frame(confirmacao, pady=15)
                f4.pack()

                f5 = Frame(confirmacao)
                f5.pack(side=BOTTOM)

                confirma = Label(f4, text="Dados inseridos com sucesso!", fg="green")
                confirma.pack()

                ok = Button(f5, text="OK", width=15, command=confirmacao.destroy)
                ok.pack()
            except:
                mydb.close()
                #form.delete(0, END)
                erro = Tk()
                erro.title('Erro')
                erro.geometry('300x100')
                erro.resizable(0, 0)
                f6 = Frame(erro, pady=15)
                f6.pack()

                f7 = Frame(erro)
                f7.pack(side=BOTTOM)

                confirma = Label(f6, text="Erro ao inserir cadastro no banco de dados!", fg="red")
                confirma.pack()
                ok = Button(f7, text="OK", width=15, command=erro.destroy)
                ok.pack()
        Cliente_novo_proprietario = Tk()
        Cliente_novo_proprietario.title('Inserir novo cliente da imobiliária')
        Cliente_novo_proprietario.geometry("600x400")
        #Cliente_novo_proprietario.resizable(0, 0)
        self.f1 = Frame(Cliente_novo_proprietario)
        self.f2 = Frame(Cliente_novo_proprietario)
        self.f3 = Frame(Cliente_novo_proprietario)
        self.f4 = Frame(Cliente_novo_proprietario)
        self.f5 = Frame(Cliente_novo_proprietario)
        self.f6 = Frame(Cliente_novo_proprietario)
        self.f7 = Frame(Cliente_novo_proprietario)
        self.f1.pack()
        self.f2.pack()
        self.f3.pack()
        self.f4.pack()
        self.f5.pack()
        self.f6.pack()
        self.f7.pack()
        self.font3 = ('Verdana', '15', 'bold')
        label_novo_cliente_proprietario = Label(self.f1, font=self.font3, text='Insira dados do novo cliente proprietário:', fg='green')
        label_novo_cliente_proprietario.pack()
        label_nome = Label(self.f2, text='Nome:')
        label_nome.pack(side=LEFT)
        entry_nome = Entry(self.f2)
        entry_nome.pack(side=LEFT)
        label_estado_civil = Label(self.f3,text='Estado civíl:')
        label_estado_civil.pack(side=LEFT)
        entry_estado_civil = Entry(self.f3)
        entry_estado_civil.pack(side=LEFT)
        label_CPF = Label(self.f4, text='CPF:')
        label_CPF.pack(side=LEFT)
        entry_CPF = Entry(self.f4)
        entry_CPF.pack(side=LEFT)
        label_telefone = Label(self.f5, text='Telefone:')
        label_telefone.pack(side=LEFT)
        entry_telefone = Entry(self.f5)
        entry_telefone.pack(side=LEFT)
        label_email = Label(self.f6,text='E-mail:')
        label_email.pack(side=LEFT)
        entry_email = Entry(self.f6)
        entry_email.pack(side=LEFT)
        inserir = Button(self.f7,text='Inserir',command=inserir_proprietario)
        inserir.pack(side=LEFT)
        voltar = Button(self.f7,text='Voltar',command=Cliente_novo_proprietario.destroy)
        voltar.pack(side=LEFT)


    def atualizao_cliente_proprietario(self):
        def atualizar_proprietario():
            try:
                mydb = mysql.connector.connect(host="localhost", user="root", password="ernst5897",
                                              database="sistema_imobiliario")
                mycursor = mydb.cursor()
                mycursor.execute(f'UPDATE Cliente_proprietario SET nome_proprietario = {entry_nome.get()}, estado_civil = {entry_estado_civil.get()}, telefone_proprietario = {entry_telefone.get()}, email = {entry_email.get()} WHERE CPF_proprietario = {entry_CPF.get()}')
                mydb.commit()
                mycursor.close()
                mydb.close()
                confirmacao = Tk()
                confirmacao.title('Confirmação')
                confirmacao.geometry('250x100')
                confirmacao.resizable(0, 0)
                f4 = Frame(confirmacao, pady=15)
                f4.pack()

                f5 = Frame(confirmacao)
                f5.pack(side=BOTTOM)

                confirma = Label(f4, text="Dados inseridos com sucesso!", fg="green")
                confirma.pack()

                ok = Button(f5, text="OK", width=15, command=confirmacao.destroy)
                ok.pack()
            except:
                mydb.close()
                #form.delete(0, END)
                erro = Tk()
                erro.title('Erro')
                erro.geometry('300x100')
                erro.resizable(0, 0)
                f6 = Frame(erro, pady=15)
                f6.pack()

                f7 = Frame(erro)
                f7.pack(side=BOTTOM)

                confirma = Label(f6, text="Erro ao atualizar no banco de dados!", fg="red")
                confirma.pack()
                ok = Button(f7, text="OK", width=15, command=erro.destroy)
                ok.pack()
        Cliente_proprietario_atualizar = Tk()
        Cliente_proprietario_atualizar.title('Atualização do cliente proprietário da imobiliária')
        #Cliente_atualizar.resizable(0, 0)
        self.f1 = Frame(Cliente_proprietario_atualizar)
        self.f2 = Frame(Cliente_proprietario_atualizar)
        self.f3 = Frame(Cliente_proprietario_atualizar)
        self.f4 = Frame(Cliente_proprietario_atualizar)
        self.f5 = Frame(Cliente_proprietario_atualizar)
        self.f6 = Frame(Cliente_proprietario_atualizar)
        self.f7 = Frame(Cliente_proprietario_atualizar)
        self.f8 = Frame(Cliente_proprietario_atualizar)
        self.f9 = Frame(Cliente_proprietario_atualizar)
        self.f10 = Frame(Cliente_proprietario_atualizar)
        self.f11 = Frame(Cliente_proprietario_atualizar)
        self.f12 = Frame(Cliente_proprietario_atualizar)
        self.f1.pack()
        self.f2.pack()
        self.f3.pack()
        self.f4.pack()
        self.f5.pack()
        self.f6.pack()
        self.f7.pack()
        self.f8.pack()
        self.f9.pack()
        self.f10.pack()
        self.f11.pack()
        self.f12.pack()
        label_frame = Label(self.f1,text="Digite o CPF do cliente proprietário")
        label_frame.pack()
        label_CPF = Label(self.f2,text='CPF do cliente:')
        label_CPF.pack(side = LEFT)
        entry_CPF = Entry(self.f2)
        entry_CPF.pack(side = LEFT)
        label_atualizacao = Label(self.f3,text='Dados do proprietário para serem atualizados.')
        label_atualizacao.pack()
        label_nome = Label(self.f4,text='Nome:')
        label_nome.pack(side=LEFT)
        entry_nome = Entry(self.f4)
        entry_nome.pack(side=LEFT)
        label_estado_civil = Label(self.f5,text='Estado civil:')
        label_estado_civil.pack(side=LEFT)
        entry_estado_civil = Entry(self.f5)
        entry_estado_civil.pack(side=LEFT)
        label_telefone = Label(self.f6,text='Telefone:')
        label_telefone.pack(side=LEFT)
        entry_telefone = Entry(self.f6)
        entry_telefone.pack(side=LEFT)
        label_email = Label(self.f7,text='E-mail:')
        label_email.pack(side=LEFT)
        entry_email = Entry(self.f7)
        entry_email.pack(side=LEFT)
        inserir = Button(self.f8, text='Atualizar',command=atualizar_proprietario)
        inserir.pack(side=LEFT)
        voltar = Button(self.f8, text='Voltar',command=Cliente_proprietario_atualizar.destroy)
        voltar.pack(side=LEFT)


    def atualizao_cliente_inquilino(self):
        def atualizar_inquilino():
            try:
                mydb = mysql.connector.connect(host="localhost", user="root", password="ernst5897",
                                              database="sistema_imobiliario")
                mycursor = mydb.cursor()
                mycursor.execute(f"UPDATE FROM CLiente_inquilino SET nome_inquilino = {entry_nome.get()}, estado_civil = {entry_estado_civil.get()}, telefone_inquilino = {entry_telefone.get()}, "
                                 f"profissao = {entry_profissao.get()}, renda_familiar = {entry_renda.get()}, nome_fiadores = {entry_nome_fiadores.get()}, telefone_fiadores = {entry_telefone_fiadores.get()}, "
                                 f"saldo_banco_fiadores = {entry_renda_fiadores.get()}, email = {entry_email.get()} WHERE CPF_inquilino = {entry_CPF.get()}")
                mydb.commit()
                mycursor.close()
                mydb.close()
                confirmacao = Tk()
                confirmacao.title('Confirmação')
                confirmacao.geometry('250x100')
                confirmacao.resizable(0, 0)
                f4 = Frame(confirmacao, pady=15)
                f4.pack()

                f5 = Frame(confirmacao)
                f5.pack(side=BOTTOM)

                confirma = Label(f4, text="Dados do cliente inquilino atualizados com sucesso!", fg="green")
                confirma.pack()

                ok = Button(f5, text="OK", width=15, command=confirmacao.destroy)
                ok.pack()
            except:
                mydb.close()
                erro = Tk()
                erro.title('Erro')
                erro.geometry('300x100')
                erro.resizable(0, 0)
                f6 = Frame(erro, pady=15)
                f6.pack()

                f7 = Frame(erro)
                f7.pack(side=BOTTOM)

                confirma = Label(f6, text="Erro ao atualizar cliente inquilino no banco de dados!", fg="red")
                confirma.pack()
                ok = Button(f7, text="OK", width=15, command=erro.destroy)
                ok.pack()
        Cliente_inquilino_atualizar = Tk()
        Cliente_inquilino_atualizar.title('Atualização do cliente da imobiliária')
        Cliente_inquilino_atualizar.geometry("800x600")
        #Cliente_atualizar.resizable(0, 0)
        self.f1 = Frame(Cliente_inquilino_atualizar)
        self.f2 = Frame(Cliente_inquilino_atualizar)
        self.f3 = Frame(Cliente_inquilino_atualizar)
        self.f4 = Frame(Cliente_inquilino_atualizar)
        self.f5 = Frame(Cliente_inquilino_atualizar)
        self.f6 = Frame(Cliente_inquilino_atualizar)
        self.f7 = Frame(Cliente_inquilino_atualizar)
        self.f8 = Frame(Cliente_inquilino_atualizar)
        self.f9 = Frame(Cliente_inquilino_atualizar)
        self.f10 = Frame(Cliente_inquilino_atualizar)
        self.f11 = Frame(Cliente_inquilino_atualizar)
        self.f12 = Frame(Cliente_inquilino_atualizar)
        self.f13 = Frame(Cliente_inquilino_atualizar)
        self.f1.pack()
        self.f2.pack()
        self.f3.pack()
        self.f4.pack()
        self.f5.pack()
        self.f6.pack()
        self.f7.pack()
        self.f8.pack()
        self.f9.pack()
        self.f10.pack()
        self.f11.pack()
        self.f12.pack()
        self.f13.pack()
        label_frame = LabelFrame(self.f1,text="Digite o CPF do cliente inquilino")
        label_frame.pack()
        label_CPF = Label(self.f2,text='CPF do cliente:')
        label_CPF.pack(side = LEFT)
        entry_CPF = Entry(self.f2)
        entry_CPF.pack(side = LEFT)
        label_atualizacao = Label(self.f3,text="Informações do cliente inquilino para serem atualizados abaixo!")
        label_atualizacao.pack()
        label_nome = Label(self.f4,text='Nome:')
        label_nome.pack(side=LEFT)
        entry_nome = Entry(self.f4)
        entry_nome.pack(side=LEFT)
        label_estado_civil = Label(self.f5,text='Estado civil:')
        label_estado_civil.pack(side=LEFT)
        entry_estado_civil = Entry(self.f5)
        entry_estado_civil.pack(side=LEFT)
        label_telefone = Label(self.f6,text='Telefone:')
        label_telefone.pack(side=LEFT)
        entry_telefone = Entry(self.f6)
        entry_telefone.pack(side=LEFT)
        label_profissao = Label(self.f7,text='Profissão:')
        label_profissao.pack(side=LEFT)
        entry_profissao = Entry(self.f7)
        entry_profissao.pack(side=LEFT)
        label_renda = Label(self.f8,text='Renda familiar:')
        label_renda.pack(side=LEFT)
        entry_renda = Entry(self.f8)
        entry_renda.pack(side=LEFT)
        label_nome_fiadores = Label(self.f9,text='Nome(s) do(s) fiador(es):')
        label_nome_fiadores.pack(side=LEFT)
        entry_nome_fiadores = Entry(self.f9)
        entry_nome_fiadores.pack(side=LEFT)
        label_telefone_fiadores = Label(self.f10,text='telefone(s) do(s) fiador(es):')
        label_telefone_fiadores.pack(side=LEFT)
        entry_telefone_fiadores = Entry(self.f10)
        entry_telefone_fiadores.pack(side=LEFT)
        label_renda_fiadores = Label(self.f11,text='Renda do(s) fiador(es):')
        label_renda_fiadores.pack(side=LEFT)
        entry_renda_fiadores = Entry(self.f11)
        entry_renda_fiadores.pack(side=LEFT)
        label_email = Label(self.f12,text='E-mail:')
        label_email.pack(side=LEFT)
        entry_email = Entry(self.f12)
        entry_email.pack(side=LEFT)
        buscar_CPF = Button(self.f13,text='Buscar',command=atualizar_inquilino)
        buscar_CPF.pack(side = LEFT)
        voltar = Button(self.f13,text='Voltar',command=Cliente_inquilino_atualizar.destroy)
        voltar.pack(side = LEFT)

    def atualizacao_corretor(self):
        def atualizar_corretor():
            try:
                mydb = mysql.connector.connect(host="localhost", user="root", password="ernst5897",
                                              database="sistema_imobiliario")
                mycursor = mydb.cursor()
                mycursor.execute(f"UPDATE FROM Corretor SET nome_corretor = {entry_nome.get()}, telefone_corretor = {entry_telefone.get()}, valor_comisao = {entry_valor.get()} WHERE CRECI = {entry_CRECI.get()}")
                mydb.commit()
                mycursor.close()
                mydb.close()

                confirmacao = Tk()
                confirmacao.title('Confirmação')
                confirmacao.geometry('250x100')
                confirmacao.resizable(0, 0)
                f4 = Frame(confirmacao, pady=15)
                f4.pack()

                f5 = Frame(confirmacao)
                f5.pack(side=BOTTOM)

                confirma = Label(f4, text="Dados do corretor atualizados com sucesso!", fg="green")
                confirma.pack()

                ok = Button(f5, text="OK", width=15, command=confirmacao.destroy)
                ok.pack()
            except:
                mydb.close()

                erro = Tk()
                erro.title('Erro')
                erro.geometry('300x100')
                erro.resizable(0, 0)
                f6 = Frame(erro, pady=15)
                f6.pack()

                f7 = Frame(erro)
                f7.pack(side=BOTTOM)

                confirma = Label(f6, text="Erro ao atualizar dados do corretor no banco de dados!", fg="red")
                confirma.pack()
                ok = Button(f7, text="OK", width=15, command=erro.destroy)
                ok.pack()
        Corretor_atualizar = Tk()
        Corretor_atualizar.title('Atualização do corretor da imobiliária')
        #Corretor_atualizar.resizable(0, 0)
        self.f1 = Frame(Corretor_atualizar)
        self.f2 = Frame(Corretor_atualizar)
        self.f3 = Frame(Corretor_atualizar)
        self.f4 = Frame(Corretor_atualizar)
        self.f5 = Frame(Corretor_atualizar)
        self.f6 = Frame(Corretor_atualizar)
        self.f7 = Frame(Corretor_atualizar)
        self.f8 = Frame(Corretor_atualizar)
        self.f9 = Frame(Corretor_atualizar)
        self.f1.pack()
        self.f2.pack()
        self.f3.pack()
        self.f4.pack()
        self.f5.pack()
        self.f6.pack()
        self.f7.pack()
        self.f8.pack()
        self.f9.pack()
        label_frame = LabelFrame(self.f1, text="Digite o CRECI do corretor")
        label_frame.pack()
        label_CRECI = Label(self.f2, text='CRECI:')
        label_CRECI.pack(side=LEFT)
        entry_CRECI = Entry(self.f2)
        entry_CRECI.pack(side=LEFT)
        label_atualizacao = Label(self.f3,text='Insira as informações abaixo para atualizar o corretor!')
        label_atualizacao.pack()
        label_nome = Label(self.f4,text='Nome:')
        label_nome.pack(side=LEFT)
        entry_nome = Entry(self.f4)
        entry_nome.pack(side=LEFT)
        label_telefone = Label(self.f5,text='Telefone:')
        label_telefone.pack(side=LEFT)
        entry_telefone = Entry(self.f5)
        entry_telefone.pack(side=LEFT)
        label_valor = Label(self.f6,text='Valor da comissão:')
        label_valor.pack(side=LEFT)
        entry_valor = Entry(self.f6)
        entry_valor.pack(side=LEFT)
        buscar_CPF = Button(self.f7, text='Buscar',command = atualizar_corretor)
        buscar_CPF.pack(side=LEFT)
        voltar = Button(self.f7, text='Voltar',command=Corretor_atualizar.destroy)
        voltar.pack(side=LEFT)

    def atualizacao_imovel(self):
        def atualizar_imovel():
            try:
                mydb = mysql.connector.connect(host="localhost", user="root", password="ernst5897",
                                              database="sistema_imobiliario")
                mycursor = mydb.cursor()
                mycursor.execute(f"SELECT status_imovel FROM Imovel WHERE id_imovel = {entry_id_imovel.get()}")
                results = mycursor.fetchone()
                mycursor.close()
                mydb.close()
                if results == 'livre':
                    mydb = mysql.connector.connect(host="localhost", user="root", password="ernst5897",
                                                   database="sistema_imobiliario")
                    mycursor = mydb.cursor()
                    mycursor.execute(f"UPDATE Imovel SET numero_quartos = {entry_quartos.get()}, numero_vagas = {entry_vagas.get()}, area_construida = {entry_area.get()}, endereco = {entry_endereco.get()}, valor_aluguel = {entry_valor.get()} WHERE id_imovel = {entry_id_imovel.get()}")
                    mydb.commit()
                    mycursor.close()
                    mydb.close()
                    confirmacao = Tk()
                    confirmacao.title('Confirmação')
                    confirmacao.geometry('250x100')
                    confirmacao.resizable(0, 0)
                    f4 = Frame(confirmacao, pady=15)
                    f4.pack()

                    f5 = Frame(confirmacao)
                    f5.pack(side=BOTTOM)

                    confirma = Label(f4, text="Dados atualizados com sucesso!", fg="green")
                    confirma.pack()

                    ok = Button(f5, text="OK", width=15, command=confirmacao.destroy)
                    ok.pack()
                else:
                    erro = Tk()
                    erro.title('Erro')
                    erro.geometry('300x100')
                    erro.resizable(0, 0)
                    f6 = Frame(erro, pady=15)
                    f6.pack()

                    f7 = Frame(erro)
                    f7.pack(side=BOTTOM)

                    confirma = Label(f6, text="O imóvel está ocupado ou alugado!", fg="red")
                    confirma.pack()
                    ok = Button(f7, text="OK", width=15, command=erro.destroy)
                    ok.pack()
            except:
                mydb.close()

                erro = Tk()
                erro.title('Erro')
                erro.geometry('300x100')
                erro.resizable(0, 0)
                f6 = Frame(erro, pady=15)
                f6.pack()

                f7 = Frame(erro)
                f7.pack(side=BOTTOM)

                confirma = Label(f6, text="Erro ao inserir dados no banco de dados!", fg="red")
                confirma.pack()
                ok = Button(f7, text="OK", width=15, command=erro.destroy)
                ok.pack()
        Imovel_atualizar = Tk()
        Imovel_atualizar.title('Atualização do imóvel da imobiliária')
        #Imovel_atualizar.resizable(0, 0)
        self.f1 = Frame(Imovel_atualizar)
        self.f2 = Frame(Imovel_atualizar)
        self.f3 = Frame(Imovel_atualizar)
        self.f4 = Frame(Imovel_atualizar)
        self.f5 = Frame(Imovel_atualizar)
        self.f6 = Frame(Imovel_atualizar)
        self.f7 = Frame(Imovel_atualizar)
        self.f8 = Frame(Imovel_atualizar)
        self.f9 = Frame(Imovel_atualizar)
        self.f10 = Frame(Imovel_atualizar)
        self.f11 = Frame(Imovel_atualizar)
        self.f12 = Frame(Imovel_atualizar)
        self.f1.pack()
        self.f2.pack()
        self.f3.pack()
        self.f4.pack()
        self.f5.pack()
        self.f6.pack()
        self.f7.pack()
        self.f8.pack()
        self.f9.pack()
        self.f10.pack()
        self.f11.pack()
        self.f12.pack()
        label_frame = Label(self.f1, text="Digite o id do imóvel para fazer a atualização!")
        label_frame.pack()
        label_id_imovel = Label(self.f2, text='ID do imóvel:')
        label_id_imovel.pack(side=LEFT)
        entry_id_imovel = Entry(self.f2)
        entry_id_imovel.pack(side=LEFT)
        label_info = Label(self.f3,text='Insira os dados abaixo para serem atualizados os dados do imóvel abaixo!',fg='red')
        label_info.pack()
        label_seguranca = Label(self.f4,text='Se o imóvel estiver alugado, a atualização será impedida por segurança!',fg='red')
        label_seguranca.pack()
        label_quartos = Label(self.f4,text='Número de quartos:')
        label_quartos.pack(side=LEFT)
        entry_quartos = Entry(self.f4)
        entry_quartos.pack(side=LEFT)
        label_vagas = Label(self.f5,text='Número de vagas:')
        label_vagas.pack(side=LEFT)
        entry_vagas = Entry(self.f5)
        entry_vagas.pack(side=LEFT)
        label_area = Label(self.f6,text='Área construída:')
        label_area.pack(side=LEFT)
        entry_area = Entry(self.f6)
        entry_area.pack(side=LEFT)
        label_endereco = Label(self.f7,text='Endereço:')
        label_endereco.pack(side=LEFT)
        entry_endereco = Entry(self.f7)
        entry_endereco.pack(side=LEFT)
        label_valor = Label(self.f8,text='Valor do aluguel:')
        label_valor.pack(side=LEFT)
        entry_valor = Entry(self.f8)
        entry_valor.pack(side=LEFT)
        buscar_id_imovel = Button(self.f12, text='Buscar',command=atualizar_imovel)
        buscar_id_imovel.pack(side=LEFT)
        voltar = Button(self.f12, text='Voltar',command=Imovel_atualizar.destroy)
        voltar.pack(side=LEFT)
    def atualizacao_aluguel(self):
        def atualizar_aluguel():
            try:
                mydb = mysql.connector.connect(host="localhost", user="root", password="ernst5897",
                                              database="sistema_imobiliario")
                mycursor = mydb.cursor()
                mycursor.execute(f"SELECT id_contrato FROM Contrato_aluguel WHERE id_contrtato = {entry_id_contrato.get()}")
                results = mycursor.fetchone()
                mycursor.close()
                mydb.close()
                if results == entry_id_contrato.get():
                    mydb = mysql.connector.connect(host="localhost", user="root", password="ernst5897",
                                                   database="sistema_imobiliario")
                    mycursor = mydb.cursor()
                    mycursor.execute(f"UPDATE Contrato_aluguel SET valor_aluguel = {entry_valor.get()} WHERE id_contrato = {entry_id_contrato.get()}")
                    mydb.commit()
                    mycursor.close()
                    mydb.close()
                    confirmacao = Tk()
                    confirmacao.title('Confirmação')
                    confirmacao.geometry('250x100')
                    confirmacao.resizable(0, 0)
                    f4 = Frame(confirmacao, pady=15)
                    f4.pack()

                    f5 = Frame(confirmacao)
                    f5.pack(side=BOTTOM)

                    confirma = Label(f4, text="Dados inseridos com sucesso!", fg="green")
                    confirma.pack()

                    ok = Button(f5, text="OK", width=15, command=confirmacao.destroy)
                    ok.pack()
            except:
                mydb.close()

                erro = Tk()
                erro.title('Erro')
                erro.geometry('300x100')
                erro.resizable(0, 0)
                f6 = Frame(erro, pady=15)
                f6.pack()

                f7 = Frame(erro)
                f7.pack(side=BOTTOM)

                confirma = Label(f6, text="Erro ao atualizar dados no banco de dados!", fg="red")
                confirma.pack()
                ok = Button(f7, text="OK", width=15, command=erro.destroy)
                ok.pack()
        Aluguel_atualizar = Tk()
        Aluguel_atualizar.title('Atualização do aluguel da imobiliária')
        #Aluguel_atualizar.resizable(0, 0)
        self.f1 = Frame(Aluguel_atualizar)
        self.f2 = Frame(Aluguel_atualizar)
        self.f3 = Frame(Aluguel_atualizar)
        self.f4 = Frame(Aluguel_atualizar)
        self.f5 = Frame(Aluguel_atualizar)
        self.f6 = Frame(Aluguel_atualizar)
        self.f1.pack()
        self.f2.pack()
        self.f3.pack()
        self.f4.pack()
        self.f5.pack()
        self.f6.pack()
        label_frame = Label(self.f1, text="Digite o id do contrato")
        label_frame.pack()
        label_id_contrato = Label(self.f2, text='ID do contrato:')
        label_id_contrato.pack(side=LEFT)
        entry_id_contrato = Entry(self.f2)
        entry_id_contrato.pack(side=LEFT)
        label_info = Label(self.f4,text='Insira a informação abaixo para atualizar o contrato!')
        label_info.pack()
        label_seguranca = Label(self.f5,text='Senao encontrar o contrato, não sofrerá a alteração!')
        label_seguranca.pack()
        label_valor = Label(self.f6,text="Valor do aluguel:")
        label_valor.pack(side=LEFT)
        entry_valor = Entry(self.f6)
        entry_valor.pack(side=LEFT)
        buscar_id_contrato = Button(self.f3, text='Buscar',command=atualizar_aluguel)
        buscar_id_contrato.pack(side=LEFT)
        voltar = Button(self.f3, text='Voltar',command=Aluguel_atualizar.destroy)
        voltar.pack(side=LEFT)
    def atualizacao_dados(self):
        Atualizar_dados = Tk()
        Atualizar_dados.title('Atualização de dados da imobiliária')
        #Atualizar_dados.resizable(0, 0)
        self.f1 = Frame(Atualizar_dados)
        self.f2 = Frame(Atualizar_dados)
        self.f3 = Frame(Atualizar_dados)
        self.f4 = Frame(Atualizar_dados)
        self.f1.pack()
        self.f2.pack()
        self.f3.pack()
        self.f4.pack()
        #self.font1 = ('Verdana','20','bold')
        atualizacao_label = Label(self.f1,font = self.font1,text='Menu de atualização de dados do sistema')
        atualizacao_label.pack()
        lista_atualizacao = ['atualização do cliente proprietário','atualização do cliente inquilino','atualização do corretor','atualização do imóvel','atualização do aluguel']
        comando_atualizacao = [self.atualizao_cliente_proprietario, self.atualizao_cliente_inquilino,self.atualizacao_corretor,self.atualizacao_imovel,self.atualizacao_aluguel]
        for i in range(len(lista_atualizacao)):
            a = Button(self.f2, text=lista_atualizacao[i], command=comando_atualizacao[i], pady=10)
            a.pack()
        sair_main = Button(self.f2, text='Sair', bg='red', command= Atualizar_dados.destroy)
        sair_main.pack()
    def delecao_cliente_proprietario(self):
        def apagar_proprietario():
            try:
                mydb = mysql.connector.connect(host="localhost", user="root", password="ernst5897",
                                               database="sistema_imobiliario")
                mycursor = mydb.cursor()
                mycursor.execute(f"SELECT * FROM Contrato_aluguel WHERE CPF_proprietario = {entry_CPF_proprietario.get()}")
                results = mycursor.fetchall()
                mycursor.close()
                mydb.close()

                if len(results) == 0:
                    mydb = mysql.connector.connect(host="localhost", user="root", password="ernst5897",
                                                   database="sistema_imobiliario")
                    mycursor = mydb.cursor()
                    mycursor.execute(f"SELECT id_imovel FROM Imovel WHERE CPF_dono = {entry_CPF_proprietario.get()}")
                    results = mycursor.fetchall()
                    mydb.commit()
                    mycursor.close()
                    mydb.close()
                    for i in range(len(results)):
                        mydb = mysql.connector.connect(host="localhost", user="root", password="ernst5897",
                                                       database="sistema_imobiliario")
                        mycursor = mydb.cursor()
                        mycursor.execute(f"DELETE FROM Oferta_aluguel WHERE CPF_dono = {results[i]}")
                        mydb.commit()
                        mycursor.close()
                        mydb.close()
                        mydb = mysql.connector.connect(host="localhost", user="root", password="ernst5897",
                                                       database="sistema_imobiliario")
                        mycursor = mydb.cursor()
                        mycursor.execute(f"DELETE FROM Visita_imovel WHERE id_imovel = {results[i]}")
                        mydb.commit()
                        mycursor.close()
                        mydb.close()

                    mydb = mysql.connector.connect(host="localhost", user="root", password="ernst5897",
                                                   database="sistema_imobiliario")
                    mycursor = mydb.cursor()
                    mycursor.execute(f"DELETE FROM Imovel WHERE CPF_dono = {entry_CPF_proprietario.get()}")
                    mydb.commit()
                    mycursor.close()
                    mydb.close()

                    mydb = mysql.connector.connect(host="localhost", user="root", password="ernst5897",
                                                  database="sistema_imobiliario")
                    mycursor = mydb.cursor()
                    mycursor.execute(f"DELETE FROM Cliente_proprietario WHERE CPF_proprietario = {entry_CPF_proprietario.get()}")
                    mydb.commit()
                    mycursor.close()
                    mydb.close()

                    entry_CPF_proprietario.delete(0, END)
                    confirmacao = Tk()
                    confirmacao.title('Confirmação')
                    confirmacao.geometry('250x100')
                    confirmacao.resizable(0, 0)
                    f4 = Frame(confirmacao, pady=15)
                    f4.pack()

                    f5 = Frame(confirmacao)
                    f5.pack(side=BOTTOM)

                    confirma = Label(f4, text="Dados apagados com sucesso!", fg="green")
                    confirma.pack()

                    ok = Button(f5, text="OK", width=15, command=confirmacao.destroy)
                    ok.pack()
            except:
                mydb.close()

                entry_CPF_proprietario.delete(0, END)
                erro = Tk()
                erro.title('Erro')
                erro.geometry('300x100')
                erro.resizable(0, 0)
                f6 = Frame(erro, pady=15)
                f6.pack()

                f7 = Frame(erro)
                f7.pack(side=BOTTOM)

                confirma = Label(f6, text="Erro ao deletar no banco de dados!", fg="red")
                confirma.pack()
                ok = Button(f7, text="OK", width=15, command=erro.destroy)
                ok.pack()
        Apagar_cliente_proprietario = Tk()
        Apagar_cliente_proprietario.title('Apagar de dados do cliente proprietário da imobiliária')
        #Apagar_cliente_proprietario.resizable(0, 0)
        self.f1 = Frame(Apagar_cliente_proprietario)
        self.f2 = Frame(Apagar_cliente_proprietario)
        self.f3 = Frame(Apagar_cliente_proprietario)
        self.f4 = Frame(Apagar_cliente_proprietario)
        self.f5 = Frame(Apagar_cliente_proprietario)
        self.f1.pack()
        self.f2.pack()
        self.f3.pack()
        self.f4.pack()
        self.f5.pack()
        label_info = Label(self.f1,text='apagar as informações do cliente proprietário')
        label_info.pack()
        label_aviso_1 = Label(self.f2,text='Caso o cliente proprietario tiver imóveis cadastrados, a deleção será impedida.',fg='red')
        label_aviso_1.pack(side=LEFT)
        label_aviso_2 = Label(self.f3,text='Caso queria apagar o cliente proprietário, é necessário apagar os contratos vigentes e imóveis cadastrados!',fg='red')
        label_aviso_2.pack(side=LEFT)
        label_CPF_proprietario = Label(self.f4,text='CPF do proprietário:')
        label_CPF_proprietario.pack(side=LEFT)
        entry_CPF_proprietario = Entry(self.f4)
        entry_CPF_proprietario.pack(side=LEFT)
        botao_fazer = Button(self.f5,text='Apagar',bg='red',command=apagar_proprietario)
        botao_fazer.pack(side=LEFT)
        botao_voltar = Button(self.f5,text='Voltar',command=Apagar_cliente_proprietario.destroy)
        botao_voltar.pack(side=LEFT)
    def delecao_cliente_inquilino(self):
        def apagar_inquilino():
            try:
                mydb = mysql.connector.connect(host="localhost", user="root", password="ernst5897",
                                              database="sistema_imobiliario")
                mycursor = mydb.cursor()
                mycursor.execute(f"SELECT id_contrato FROM Contrato_aluguel WHERE CPF_inquilino ={entry_CPF_inquilino.get()}")
                results = mycursor.fetchall()
                mycursor.close()
                mydb.close()

                if results == 0:
                    mydb = mysql.connector.connect(host="localhost", user="root", password="ernst5897",
                                                   database="sistema_imobiliario")
                    mycursor = mydb.cursor()
                    mycursor.execute(f"DELETE * FROM Oferta_aluguel WHERE CPF_inquilino ={entry_CPF_inquilino.get()}")
                    mydb.commit()
                    mycursor.close()
                    mydb.close()

                    mydb = mysql.connector.connect(host="localhost", user="root", password="ernst5897",
                                                   database="sistema_imobiliario")
                    mycursor = mydb.cursor()
                    mycursor.execute(f"DELETE * FROM Cliente_inquilino WHERE CPF_inquilino ={entry_CPF_inquilino.get()}")
                    mydb.commit()
                    mycursor.close()
                    mydb.close()
                    entry_CPF_inquilino.delete(0, END)
                    confirmacao = Tk()
                    confirmacao.title('Confirmação')
                    confirmacao.geometry('250x100')
                    confirmacao.resizable(0, 0)
                    f4 = Frame(confirmacao, pady=15)
                    f4.pack()

                    f5 = Frame(confirmacao)
                    f5.pack(side=BOTTOM)

                    confirma = Label(f4, text="Dados inseridos com sucesso!", fg="green")
                    confirma.pack()

                    ok = Button(f5, text="OK", width=15, command=confirmacao.destroy)
                    ok.pack()
                else:
                    entry_CPF_inquilino.delete(0, END)
                    confirmacao = Tk()
                    confirmacao.title('Segurança')
                    confirmacao.geometry('250x100')
                    confirmacao.resizable(0, 0)
                    f4 = Frame(confirmacao, pady=15)
                    f4.pack()

                    f5 = Frame(confirmacao)
                    f5.pack(side=BOTTOM)

                    confirma = Label(f4, text="O cliente inquilino possui um contrato de aluguel em vigente!", fg="green")
                    confirma.pack()

                    ok = Button(f5, text="OK", width=15, command=confirmacao.destroy)
                    ok.pack()
            except:
                mydb.close()
                entry_CPF_inquilino.delete(0, END)
                erro = Tk()
                erro.title('Erro')
                erro.geometry('300x100')
                erro.resizable(0, 0)
                f6 = Frame(erro, pady=15)
                f6.pack()

                f7 = Frame(erro)
                f7.pack(side=BOTTOM)

                confirma = Label(f6, text="Erro ao deletar cadastro no banco de dados!", fg="red")
                confirma.pack()
                ok = Button(f7, text="OK", width=15, command=erro.destroy)
                ok.pack()

        Apagar_cliente_inquilino = Tk()
        Apagar_cliente_inquilino.title('Apagar de dados do cliente inquilino da imobiliária')
        # Apagar_cliente_proprietario.resizable(0, 0)
        self.f1 = Frame(Apagar_cliente_inquilino)
        self.f2 = Frame(Apagar_cliente_inquilino)
        self.f3 = Frame(Apagar_cliente_inquilino)
        self.f4 = Frame(Apagar_cliente_inquilino)
        self.f5 = Frame(Apagar_cliente_inquilino)
        self.f1.pack()
        self.f2.pack()
        self.f3.pack()
        self.f4.pack()
        self.f5.pack()
        label_info = Label(self.f1, text='apagar as informações do cliente inquilino')
        label_info.pack()
        label_aviso_1 = Label(self.f2,
                              text='Caso o cliente iquilino tiver contratos vigentes, a deleção será impedida.',
                              fg='red')
        label_aviso_1.pack(side=LEFT)
        label_aviso_2 = Label(self.f3,
                              text='Caso queria apagar o cliente proprietário, é necessário apagar os contratos vigentes!',
                              fg='red')
        label_aviso_2.pack(side=LEFT)
        label_CPF_inquilino = Label(self.f4, text='CPF do inquilino:')
        label_CPF_inquilino.pack(side=LEFT)
        entry_CPF_inquilino = Entry(self.f4)
        entry_CPF_inquilino.pack(side=LEFT)
        botao_fazer = Button(self.f5, text='Apagar', bg='red', command=apagar_inquilino)
        botao_fazer.pack(side=LEFT)
        botao_voltar = Button(self.f5, text='Voltar',command = Apagar_cliente_inquilino.destroy)
        botao_voltar.pack(side=LEFT)

    def delecao_corretor(self):
        def apagar_corretor():
            try:
                mydb = mysql.connector.connect(host="localhost", user="root", password="ernst5897",
                                              database="sistema_imobiliario")
                mycursor = mydb.cursor()
                mycursor.execute(f"DELETE FROM Corretor WHERE CRECI = {entry_deletar_CRECI.get()}")
                mydb.commit()
                mycursor.close()
                mydb.close()
                entry_deletar_CRECI.delete(0, END)
                confirmacao = Tk()
                confirmacao.title('Confirmação')
                confirmacao.geometry('250x100')
                confirmacao.resizable(0, 0)
                f4 = Frame(confirmacao, pady=15)
                f4.pack()

                f5 = Frame(confirmacao)
                f5.pack(side=BOTTOM)

                confirma = Label(f4, text="Dados do corretor apagados com sucesso!", fg="green")
                confirma.pack()

                ok = Button(f5, text="OK", width=15, command=confirmacao.destroy)
                ok.pack()
            except:
                mydb.close()
                entry_deletar_CRECI.delete(0, END)
                erro = Tk()
                erro.title('Erro')
                erro.geometry('300x100')
                erro.resizable(0, 0)
                f6 = Frame(erro, pady=15)
                f6.pack()

                f7 = Frame(erro)
                f7.pack(side=BOTTOM)

                confirma = Label(f6, text="Erro ao apagar no banco de dados!", fg="red")
                confirma.pack()
                ok = Button(f7, text="OK", width=15, command=erro.destroy)
                ok.pack()
        Apagar_corretor = Tk()
        Apagar_corretor.title('Apagar de dados do corretor da imobiliária')
        #Apagar_corretor.resizable(0, 0)
        self.f1 = Frame(Apagar_corretor)
        self.f2 = Frame(Apagar_corretor)
        self.f3 = Frame(Apagar_corretor)
        self.f4 = Frame(Apagar_corretor)
        self.f1.pack()
        self.f2.pack()
        self.f3.pack()
        self.f4.pack()
        label_deletar_corretor = LabelFrame(self.f1,text='Digite o CRECI do corretor')
        label_deletar_corretor.pack()
        label_deletar_CRECI = Label(self.f2,text='CRECI:')
        label_deletar_CRECI.pack(side=LEFT)
        entry_deletar_CRECI = Entry(self.f2)
        entry_deletar_CRECI.pack(side=LEFT)
        botao_apagar = Button(self.f3,text='Apagar',bg='red',command=apagar_corretor)
        botao_apagar.pack(side=LEFT)
        botao_voltar = Button(self.f3,text='Voltar',command=Apagar_corretor.destroy)
        botao_voltar.pack(side=LEFT)
    def delecao_imovel(self):
        def apagar_imovel():
            try:
                mydb = mysql.connector.connect(host="localhost", user="root", password="ernst5897",
                                              database="sistema_imobiliario")
                mycursor = mydb.cursor()
                mycursor.execute(f"SELECT id_imovel FROM Contrato_aluguel WHERE id_imovel = {entry_id_imovel.get()}")
                results = mycursor.fetchone()
                mycursor.close()
                mydb.close()
                if len(results) == 0:
                    mydb = mysql.connector.connect(host="localhost", user="root", password="ernst5897",
                                                   database="sistema_imobiliario")
                    mycursor = mydb.cursor()
                    mycursor.execute(f"DELETE FROM Imovel WHERE id_imovel = {entry_id_imovel.get()}")
                    mydb.commit()
                    mycursor.close()
                    mydb.close()
                    entry_id_imovel.delete(0, END)
                    confirmacao = Tk()
                    confirmacao.title('Confirmação')
                    confirmacao.geometry('250x100')
                    confirmacao.resizable(0, 0)
                    f4 = Frame(confirmacao, pady=15)
                    f4.pack()

                    f5 = Frame(confirmacao)
                    f5.pack(side=BOTTOM)

                    confirma = Label(f4, text="Dados do imóvel apagados com sucesso!", fg="green")
                    confirma.pack()

                    ok = Button(f5, text="OK", width=15, command=confirmacao.destroy)
                    ok.pack()
                else:
                    entry_id_imovel.delete(0, END)
                    confirmacao = Tk()
                    confirmacao.title('Segurança')
                    confirmacao.geometry('250x100')
                    confirmacao.resizable(0, 0)
                    f4 = Frame(confirmacao, pady=15)
                    f4.pack()

                    f5 = Frame(confirmacao)
                    f5.pack(side=BOTTOM)

                    confirma = Label(f4, text="O imóvel está com contrato vigente!", fg="green")
                    confirma.pack()

                    ok = Button(f5, text="OK", width=15, command=confirmacao.destroy)
                    ok.pack()
            except:
                mydb.close()
                entry_id_imovel.delete(0, END)
                erro = Tk()
                erro.title('Erro')
                erro.geometry('300x100')
                erro.resizable(0, 0)
                f6 = Frame(erro, pady=15)
                f6.pack()

                f7 = Frame(erro)
                f7.pack(side=BOTTOM)

                confirma = Label(f6, text="Erro ao apagar no banco de dados!", fg="red")
                confirma.pack()
                ok = Button(f7, text="OK", width=15, command=erro.destroy)
                ok.pack()
        Apagar_imovel = Tk()
        Apagar_imovel.title('Apagar de dados de imóvel da imobiliária')
        Apagar_imovel.geometry("600x300")
        #Apagar_imovel.resizable(0, 0)
        self.f1 = Frame(Apagar_imovel)
        self.f2 = Frame(Apagar_imovel)
        self.f3 = Frame(Apagar_imovel)
        self.f4 = Frame(Apagar_imovel)
        self.f1.pack()
        self.f2.pack()
        self.f3.pack()
        self.f4.pack()
        label_info = Label(self.f1,text='Insere o id do imóvel para fazer a deleção do sistema, caso esteja alugado será abortado!')
        label_info.pack()
        label_id_imovel = Label(self.f2,text='ID do imóvel:')
        label_id_imovel.pack(side=LEFT)
        entry_id_imovel = Entry(self.f2)
        entry_id_imovel.pack(side=LEFT)
        botao_apagar = Button(self.f3,text='Apagar',bg='red',command=apagar_imovel)
        botao_apagar.pack(side=LEFT)
        botao_voltar = Button(self.f3,text='Voltar',command=Apagar_imovel.destroy)
        botao_voltar.pack(side=LEFT)
    def delecao_aluguel(self):
        def apagar_aluguel():
            try:
                mydb = mysql.connector.connect(host="localhost", user="root", password="ernst5897",
                                              database="sistema_imobiliario")
                mycursor = mydb.cursor()
                mycursor.execute(f"DELETE FROM Contrato_aluguel WHERE id_contrato = {entry_id_contrato.get()}")
                mydb.commit()
                mycursor.close()
                mydb.close()
                entry_id_contrato.delete(0, END)
                confirmacao = Tk()
                confirmacao.title('Confirmação')
                confirmacao.geometry('250x100')
                confirmacao.resizable(0, 0)
                f4 = Frame(confirmacao, pady=15)
                f4.pack()

                f5 = Frame(confirmacao)
                f5.pack(side=BOTTOM)

                confirma = Label(f4, text="Contrato de aluguel apagado com sucesso!", fg="green")
                confirma.pack()

                ok = Button(f5, text="OK", width=15, command=confirmacao.destroy)
                ok.pack()
            except:
                mydb.close()
                entry_id_contrato.delete(0, END)
                erro = Tk()
                erro.title('Erro')
                erro.geometry('300x100')
                erro.resizable(0, 0)
                f6 = Frame(erro, pady=15)
                f6.pack()

                f7 = Frame(erro)
                f7.pack(side=BOTTOM)

                confirma = Label(f6, text="Erro ao apagar contrato no banco de dados!", fg="red")
                confirma.pack()
                ok = Button(f7, text="OK", width=15, command=erro.destroy)
                ok.pack()
        Apagar_aluguel = Tk()
        Apagar_aluguel.title('Apagar de dados de aluguel da imobiliária')
        #Apagar_aluguel.resizable(0, 0)
        self.f1 = Frame(Apagar_aluguel)
        self.f2 = Frame(Apagar_aluguel)
        self.f3 = Frame(Apagar_aluguel)
        self.f4 = Frame(Apagar_aluguel)
        self.f1.pack()
        self.f2.pack()
        self.f3.pack()
        self.f4.pack()
        label_info = Label(self.f1,text='Insere o id do contrato para fazer a deleção do sistema.')
        label_info.pack()
        label_id_contrato = Label(self.f2, text='ID do contrato:')
        label_id_contrato.pack(side=LEFT)
        entry_id_contrato = Entry(self.f2)
        entry_id_contrato.pack(side=LEFT)
        botao_apagar = Button(self.f3, text='Apagar', bg='red', command=apagar_aluguel)
        botao_apagar.pack(side=LEFT)
        botao_voltar = Button(self.f3, text='Voltar', command=Apagar_aluguel.destroy)
        botao_voltar.pack(side=LEFT)
    def apagar_dados(self):
        Apagar_dados = Tk()
        Apagar_dados.title('Apagar de dados da imobiliária')
        #Apagar_dados.resizable(0, 0)
        Apagar_dados.geometry("800x600")
        self.f1 = Frame(Apagar_dados)
        self.f2 = Frame(Apagar_dados)
        self.f3 = Frame(Apagar_dados)
        self.f4 = Frame(Apagar_dados)
        self.f1.pack()
        self.f2.pack()
        self.f3.pack()
        self.f4.pack()
        # self.font1 = ('Verdana','20','bold')
        delecao_label = Label(self.f1, font=self.font1, text='Menu de deleção de dados do sistema')
        delecao_label.pack()
        lista_deletar = ['excluir cliente proprietário', 'excluir cliente inquilino', 'excluir corretor', 'excluir do imóvel',
                             'excluir do aluguel']
        comando_deletar = [self.delecao_cliente_proprietario,self.delecao_cliente_inquilino, self.delecao_corretor, self.delecao_imovel,
                               self.delecao_aluguel]
        for i in range(len(lista_deletar)):
            a = Button(self.f2, text=lista_deletar[i], command=comando_deletar[i], pady=10)
            a.pack()
        sair_main = Button(self.f2, text='Sair', bg='red', command=Apagar_dados.destroy)
        sair_main.pack()


main = Tk()
Imobiliaria(main)
main.title("Sistema imobiliário")
main.geometry("900x600")

main.mainloop()

